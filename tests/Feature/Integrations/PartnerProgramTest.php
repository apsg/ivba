<?php

namespace Tests\Feature\Integrations;

use App\Http\Middleware\EncryptCookies;
use App\User;
use Illuminate\Foundation\Testing\Concerns\InteractsWithDatabase;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Illuminate\Foundation\Testing\WithFaker;
use Symfony\Component\HttpFoundation\Cookie;
use Tests\TestCase;

class PartnerProgramTest extends TestCase
{
//    use DatabaseTransactions;
    use WithFaker;
    use InteractsWithDatabase;

    /** @var User */
    public $user;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->user = factory(User::class)->create();
        $this->withoutMiddleware(EncryptCookies::class);
    }

    /** @test */
    public function user_has_not_empty_partner_key()
    {
        // given user

        // when
        $key = $this->user->partner_uniqid;
        $secondKey = $this->user->fresh()->partner_uniqid;

        // then
        $this->assertNotEmpty($key);
        $this->assertGreaterThan(1, strlen($key));
        $this->assertEquals($key, $secondKey);
    }

    /** @test */
    public function user_has_partner_program_link()
    {
        // given user

        // when
        $link = $this->user->partnerLink();

        // then
        $this->assertNotEmpty($link);
        $this->assertNotEquals(url('/p'), $link);
        $this->assertGreaterThan(strlen(url('/p')), strlen($link));
    }

    /** @test */
    public function visiting_partner_link_sets_cookies_and_redirects_to_homepage()
    {
        // given
        $url = $this->user->partnerLink();

        // when
        $response = $this->get($url);

        /** @var Cookie $cookie */
        $cookie = collect($response->headers->getCookies())
            ->filter(function (Cookie $cookie) {
                return $cookie->getName() === 'partner_id';
            })
            ->first();

        // then
        $response->assertStatus(302);

        $response->assertCookie('partner_id');

        $this->assertIsObject($cookie);
        $this->assertEquals($this->user->partner_key, $cookie->getValue());
    }

    /**
     * @test
     * @group slow
     */
    public function it_correctly_sets_partner_id_when_user_registers()
    {
        // given
        $cookie = cookie()->forever('partner_id', $this->user->partner_uniqid);
        $email = $this->faker->email;
        $password = $this->faker->password(8);

        \NoCaptcha::shouldReceive('verifyResponse')
            ->once()
            ->andReturn(true);

        // when
        $response = $this->call('post', url('/register'), [
            'name'                  => $this->faker->name,
            'email'                 => $email,
            'password'              => $password,
            'password_confirmation' => $password,
            'rules'                 => true,
            'g-recaptcha-response'  => 1,
        ], [$cookie]);

        // then
        $response->assertStatus(302);
        $response->assertSessionDoesntHaveErrors();
        $this->assertDatabaseHas('users', [
            'email'      => $email,
            'partner_id' => $this->user->id,
        ]);
    }
}
